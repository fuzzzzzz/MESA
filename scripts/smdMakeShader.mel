//************************************************//
// Credits : ValVeSoftware, Prall, Nicolas Kirsch
// website http://puppetmaster.net ©2013
//************************************************//

// part of the smdImporter
// makes a simple shading network
// with a file texture given a name
// if $getTextures is true, it also prompts
// for the file texture to associate with 
// the shader.

global proc string smdMakeShader (string $shaderName, int $getTextures) 
{	
	global string $g_smdTexturePath;
	string $name;
	// make the shader node (a phong E with 0 hilites, like in the smd exporter)
	$name = `shadingNode -asShader phongE -name $shaderName`;
	setAttr ($name + ".roughness") 0;
	setAttr ($name + ".highlightSize") 0;

	// set up a file node for the file texture
	string $fileTex = `shadingNode -asTexture file -name ($name + "_file")`;
	string $place = `shadingNode -asUtility place2dTexture`;
//	Disable right now for debug purpose --red
	connectAttr -f ($place + ".coverage") ($fileTex + ".coverage");
	connectAttr -f ($place + ".translateFrame") ($fileTex + ".translateFrame");
	connectAttr -f ($place + ".rotateFrame") ($fileTex + ".rotateFrame");
	//connectAttr -f ($place + ".mirror") ($fileTex + ".mirror");
	connectAttr -f ($place + ".stagger") ($fileTex + ".stagger");
	connectAttr -f ($place + ".wrapU") ($fileTex + ".wrapU");
	connectAttr -f ($place + ".wrapV") ($fileTex + ".wrapV");
	connectAttr -f ($place + ".repeatUV") ($fileTex + ".repeatUV");
	connectAttr -f ($place + ".offset") ($fileTex + ".offset");
	connectAttr -f ($place + ".rotateUV") ($fileTex + ".rotateUV");
	connectAttr -f ($place + ".noiseUV") ($fileTex + ".noiseUV");
	connectAttr ($place + ".outUV") ($fileTex + ".uv");
	
	// get the texture files as the come up, if desired.
	if ($getTextures)
	{
		print $g_smdTexturePath;
		// auto-recognize .tga and .bmp files
		if (`file -q -exists ($g_smdTexturePath + "/" +  $shaderName + ".tga")`)
			{
			setAttr -type "string" ($fileTex + ".ftn") ($g_smdTexturePath + "/" + $shaderName + ".tga");
			}
		if (`file -q -exists ($g_smdTexturePath + "/" +  $shaderName + ".bmp")`)
			{
			setAttr -type "string" ($fileTex + ".ftn") ($g_smdTexturePath + "/" + $shaderName + ".bmp");
			}
		
		string $check = `getAttr ($fileTex + ".ftn")`;
		print $check;
		if (`size $check` < 1)
			{
			//string $fileTGAname = $g_smdTexturePath + "/" +  $shaderName + ".tga";
			//fileBrowserDialog -an "find file texture: " -in $shaderName
			fileDialog2 -fm 1 $shaderName // filebrowserDialog is deprecated 20.04.2012 --red
			-m 0 -ft "image"
			-ftc ("AEassignTextureCB "  + $fileTex + ".ftn");
			string $fileTexPath = `getAttr ($fileTex + ".ftn")`;
			$g_smdTexturePath = `dirname $fileTexPath`;
			}
	}

	// connect file to shader, and shader to SG;
	connectAttr ($fileTex + ".outColor") ($name + ".color");
	string $SG = `sets -renderable true -noSurfaceShader true -empty -name ($name + "SG")`;
	connectAttr ($name + ".oc")($SG + ".ss");
	return $SG;
}

//
//  Procedure Name:
//	AEassignTextureCB
//
				
global proc int AEassignTextureCB( string $fileAttribute,
                                 string $filename,
                                 string $fileType )
{
	//
	// Description:
	//	This procedure is called when the user changes the file texture name in
	//	the edit box in the file texture attribute editor (whether by manually
	//	typing it in, or by using the file browser to choose a new file).
	//
	//	This procedure updates the file texture node file name attribute and
	//	calls AEfileTextureNameChanged to do some special case handling for 
	//	files with alpha channels. 
	//

	setAttr $fileAttribute -type "string" $filename;

	string $currentDir = `workspace -q -dir`;
    retainWorkingDirectory ($currentDir);

	// Extract the name of the node from the node.attribute name
	//
	string $tokenArray[];
	tokenize($fileAttribute, ".", $tokenArray);

	string $fileNode = $tokenArray[0];

	AEfileTextureNameChanged($fileNode);

	return true;
}

source "colorProfileProcedures";

global proc AEfileTextureNameChanged(
	string $fileNode)
{
	//
	// Description:
	//	This procedure is called from AEassignTextureCB.
	//	If the newly chosen file has an alpha channel, this procedure hooks up
	//	the outTransparency attribute of the file node to the transparency
	//	attribute of materials which are using this file for color, where
	//	appropriate.
	//

	if (`getAttr ($fileNode + ".fileHasAlpha")` == 1)
	{
		//
		// The newly chosen file has an alpha channel.
		//

		string $dstNodeArray[];
		
		$dstNodeArray = 
			`listConnections 
				-source false 
				-destination true 
				($fileNode + ".outColor")`;
		
		string $dstNode;
		
		for ($dstNode in $dstNodeArray)
		{
			if (	(isClassified($dstNode, "shader"))
				&&	(size(`ls ($dstNode + ".transparency")`) != 0)
				&&	(size(`ls ($dstNode + ".color")`) != 0)
				&&	(`isConnected ($fileNode+".outColor") ($dstNode+".color")`)
				&&	(size(`listConnections
						-source true
						-destination false
						($dstNode + ".transparency")`) == 0))
			{
				// The dstNode is a material,
				// and it has a transparency attribute,
				// and it has a color attribute,
				// and the file node outColor is connected to the material 
				// color,
				// and that transparency attribute is not currently the
				// destination of any connection.
				// We want to connect this file node's outTransparency to
				// the dstNode's transparency.
				//
				connectAttr 
					($fileNode + ".outTransparency") 
					($dstNode + ".transparency");
			}
		}
	}
}