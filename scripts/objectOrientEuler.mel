//************************************************//
// Credits : ValVeSoftware, Prall, Nicolas Kirsch
// website http://puppetmaster.net ©2013
//************************************************//


// returns the real (matrix based) orientation of an object regardless of joint or rotate axis changes
// takes an object name and an int (1 = worldSpace, 0 = parent space) and returns 
// 3 euler angles.

// NB this function must be present for the SMD Exporter to work!
// SJT 1/12/01 -- algorithm courtesy of ken


global proc float[] objectOrientEuler ( string $object, int $world)

{	
	matrix $inMatrix[4][4];
	float $list[16];
	if ($world)
		{
			$list = `xform -q -m -ws $object`;
		}
	else
		{
			$list = `xform -q -m $object`;
		}
	int $x = 0;
	int $y = 0;
	int $counter = 0;
	for ($x; $x < 4; $x++)
	{
		for ($y = 0; $y < 4; $y++)
			{
			$inMatrix[$x][$y] = $list[$counter];
			$counter++;
			}
	}


	float $forward[3];
	float $left[3];
	float $up[3];
	float $xyDist;
	float $eulers[3];

	//
	// Extract the basis vectors from the matrix. Since we only need the Z
	// component of the up vector, we don't get X and Y.
	//
	$forward[0] = $inMatrix[0][0];
	$forward[1] = $inMatrix[0][1];
	$forward[2] = $inMatrix[0][2];
	$left[0] = $inMatrix[1][0];
	$left[1] = $inMatrix[1][1];
	$left[2] = $inMatrix[1][2];
	$up[2] = $inMatrix[2][2];

	$xyDist = sqrt( $forward[0] * $forward[0] + $forward[1] * $forward[1] );
	
	// enough here to get angles?
	if ( $xyDist > 0.001 )
	{
		// (yaw)	z = ATAN( forward.y, forward.x );		-- in our space, forward is the X axis
		$eulers[2] = rad_to_deg( atan2( $forward[1], $forward[0] ) );

		// The engine does pitch inverted from this, but we always end up negating it in the DLL

		// (pitch)	y = ATAN( -forward.z, sqrt(forward.x*forward.x+forward.y*forward.y) );

		$eulers[1] = rad_to_deg( atan2( (-1 * $forward[2]), $xyDist ) );

		// (roll)	x = ATAN( left.z, up.z );
		$eulers[0] = rad_to_deg ( atan2( $left[2], $up[2] ) );
	}
	else	// forward is mostly Z, gimbal lock-
	{
		// (yaw)	x = ATAN( -left.x, left.y );			-- forward is mostly z, so use right for yaw
		$eulers[2] = rad_to_deg( atan2( (-1 * $left[0]), $left[1] ) );

		// The engine does pitch inverted from this, but we always end up negating it in the DLL

		// (pitch)	y = ATAN( -forward.z, sqrt(forward.x*forward.x+forward.y*forward.y) );
		$eulers[1] = rad_to_deg( atan2( (-1 *  $forward[2]), $xyDist ) );

		// Assume no roll in this case as one degree of freedom has been lost (i.e. yaw == roll)
		$eulers[0] = 0;
	}
return $eulers;
}